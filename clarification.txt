#1.Clarification 1 

//move shooter function 
function moveShooter (e) {
  squares[currentShooterIndex].classList.remove('shooter')

  switch(e.key) {

  }
}

In the context of a JavaScript event handler, `e` typically represents an event object, and `e.key` is a property of that event object that provides information about the key that was pressed or released.

For example, if this code is within a function that is handling a keyboard event, such as a `keydown` or `keyup` event, it's checking the value of the `key` property of the event object `e`.

Here's an example of how you might use this code:

```javascript
document.addEventListener('keydown', function(e) {
  switch(e.key) {
    case 'ArrowUp':
      // Handle Arrow Up key press
      break;
    case 'ArrowDown':
      // Handle Arrow Down key press
      break;
    // Add more cases for other keys as needed
  }
});
```

In this example, the code is using the `switch` statement to check the value of `e.key`, and then it can perform different actions based on which key was pressed. The actual keys you check for will depend on the specific requirements of your code. The `key` property provides a standardized way to represent the key value regardless of the keyboard layout.

--#End clarification 1--


#2.Clarification 2 
//move shooter function 
function moveShooter (e) {
  squares[currentShooterIndex].classList.remove('shooter')

  switch(e.key) {
    case 'ArrowLeft' :
      if(currentShooterIndex % width !==0) {
        currentShooterIndex -=1
        break
      }

    squares[currentShooterIndex].classList.add('shooter')

  }
}

Pra if(currentShooterIndex % width !==0) , sepse cdo katrore qe eshte 
ne cep majtas perpjestohet me 0.

currentShooterIndex -= 1 , qe ta levizi nje index majtas